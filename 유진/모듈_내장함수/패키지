# 패키지

패키지는 도트(.)를 이용해서 모듈을 계층적(디렉터리 구조)으로 관리할 수 있게 해준다.

a.b = a패키지의 b모듈

패키지 구조: 공동작업, 유지 보수 여러 면에서 유리.

패키지 만들기

**1.** `C:/doit` 디렉터리 밑에 game 및 기타 서브 디렉터리를 생성하고 .py 파일들을 다음과 같이 만들어 보자(만약 `C:/doit` 디렉터리가 없다면 먼저 생성하고 진행하자).

```
C:/doit/game/__init__.py
C:/doit/game/sound/__init__.py
C:/doit/game/sound/echo.py
C:/doit/game/graphic/__init__.py
C:/doit/game/graphic/render.py
```

game은 이 패키지의 루트 디렉터리, 나머지 sound graphic 이런 건 서브 디렉터리, 밑줄init밑줄.py는 조금 특이한 용도로 사용됨.

1. 각 디렉터리에 이닛파일 만들기
2. game 패키지 참조를 위해 set명령어로 pythonpath 환경변수에 디렉터리(c:/doit) 추가

! 반드시 파이썬 인터프리터에서 실행하여 진행해야 됨 vs ㄴ

패키지 실행하기

첫 번째는 echo 모듈을 import하여 실행하는 방법으로, 다음과 같이 실행한다.

> ※ echo 모듈은 echo.py 파일이다.

```
>>>import game.sound.echo
>>> game.sound.echo.echo_test()
echo

```

두 번째는 echo 모듈이 있는 디렉터리까지를 from ... import하여 실행하는 방법이다.

```
>>>from game.soundimport echo
>>> echo.echo_test()
echo

```

세 번째는 echo 모듈의 echo_test 함수를 직접 import하여 실행하는 방법이다.

```
>>>from game.sound.echoimport echo_test
>>> echo_test()
echo
```

## **__init__.py 의 용도**

`__init__.py` 파일은 해당 디렉터리가 패키지의 일부임을 알려주는 역할을 한다. 만약 game, sound, graphic 등 패키지에 포함된 디렉터리에 `__init__.py` 파일이 없다면 패키지로 인식되지 않는다.

from ~ import * 을 사용하기 위해서
해당 디렉터리 밑줄이닛밑줄.py에 밑줄all밑줄 변수를 설정하고 import 할 수 있는 모듈을 정의해야 됨

```
# C:/doit/game/sound/__init__.py
__all__ = ['echo']

```

여기에서 `__all__`이 의미하는 것은 sound 디렉터리에서 `*` 기호를 사용하여 import할 경우 이곳에 정의된 echo 모듈만 import된다는 의미이다.

- `..` – 부모 디렉터리
- `.` – 현재 디렉터리

**from** ..sound.echo **import** echo_test

**def render_test**():
    print("render")
    echo_test()