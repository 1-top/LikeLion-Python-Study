# 모듈

모듈이란 함수나 변수 또는 클래스를 모아 놓은 파일

※ 파이썬 확장자 .py로 만든 파이썬 파일은 모두 모듈이다.

모듈 불러오기

mod1.py를 불러오기 위해 import mod1이라고 입력하였다. 실수로 import mod1.py로 입력하지 않도록 주의하자. import는 이미 만들어 놓은 파이썬 모듈을 사용할 수 있게 해주는 명령어이다. [mod1.py](http://mod1.py/) 파일에 있는 add 함수를 사용하기 위해서는 위 예와 같이 mod1.add처럼 모듈 이름 뒤에 "."(도트 연산자)를 붙이고 함수 이름을 쓰면 된다.

※ import는 현재 디렉터리에 있는 파일이나 파이썬 라이브러리가 저장된 디렉터리에 있는 모듈만 불러올 수 있다. 파이썬 라이브러리는 파이썬을 설치할 때 자동으로 설치되는 파이썬 모듈을 말한다.

import의 사용 방법은 다음과 같다.

```
import 모듈이름

```

여기에서 모듈 이름은 mod1.py에서 .py 확장자를 제거한 mod1만을 가리킨다.

때로는 `mod1.add`, `mod1.sub`처럼 쓰지 않고 `add`, `sub`처럼 모듈 이름 없이 함수 이름만 쓰고 싶은 경우도 있을 것이다. 이럴 때는 "from 모듈 이름 import 모듈 함수"를 사용하면 된다.

> from 모듈이름 import 모듈함수

위 형식을 사용하면 위와 같이 모듈 이름을 붙이지 않고 바로 해당 모듈의 함수를 쓸 수 있다.

```
from mod1import *

```

두 번째 방법은 위와 같이 `*` 문자를 사용하는 방법이다. 07장에서 배울 정규 표현식에서 `*` 문자는 "모든 것"이라는 뜻인데 파이썬에서도 마찬가지 의미로 사용한다. 따라서 `from mod1 import *`는 mod1.py의 모든 함수를 불러서 사용하겠다는 뜻이다.

mod1.py 파일에는 함수가 2개밖에 없기 때문에 위 2가지 방법은 동일하게 적용된다.

```
if __name__ == "__main__":
    print(add(1, 4))
    print(sub(4, 2))

```

`if __name__ == "__main__"`을 사용하면 `C:\doit>python mod1.py`처럼 직접 이 파일을 실행했을 때는 `__name__ == "__main__"`이 참이 되어 if문 다음 문장이 수행된다. 반대로 대화형 인터프리터나 다른 파일에서 이 모듈을 불러서 사용할 때는 `__name__ == "__main__"`이 거짓이 되어 if문 다음 문장이 수행되지 않는다.

위와 같이 수정한 후 다시 대화형 인터프리터를 열고 실행해 보자.

```
>>>import mod1
>>>

```

아무 결괏값도 출력되지 않는 것을 확인할 수 있다.

**`__name__` 변수란?**

파이썬의 `__name__` 변수는 파이썬이 내부적으로 사용하는 특별한 변수 이름이다. 만약 `C:\doit>python mod1.py`처럼 직접 mod1.py 파일을 실행할 경우 mod1.py의 `__name__` 변수에는 `__main__` 값이 저장된다. 하지만 파이썬 셸이나 다른 파이썬 모듈에서 mod1을 import 할 경우에는 mod1.py의 `__name__` 변수에는 mod1.py의 모듈 이름 값 mod1이 저장된다.

```
>>>import mod1
>>> mod1.__name__
'mod1'
```

모듈은 함수 뿐만 아니라 클래스나 변수를 포함할 수도 있다.

다른 파이썬 파일에서도 모듈을 불러와 사용할 수 있다. 단, 파일이 동일한 디렉토리 안에 있어야 한다.

그외 모듈을 불러오는 방법

1. sys.path.append(모듈을 저장한 디렉터리)

sys모듈은 파이썬 라이브러리가 설치되어 있는 디렉터리를 확인할 수 있다.

sys.path를 입력하면 라이브러리가 설치되어 있는 디렉터리를 보여준다. sys.path.append(디렉터리)를 통해 sys.path에 (디렉터리)를 추가하면 모듈을 사용할 수 있다.

1. pythonpath 환경변수

```
C:\doit>set PYTHONPATH=C:\doit\mymod
C:\doit>python
>>> import mod2
>>> print(mod2.add(3,4))
7

```

set 명령어를 사용해 `PYTHONPATH` 환경 변수에 mod2.py 파일이 있는 `C:\doit\mymod` 디렉터리를 설정한다. 그러면 디렉터리 이동이나 별도의 모듈 추가 작업 없이 mod2 모듈을 불러와서 사용할 수 있다.